import pandas as pd
import numpy as np
import re
import nltk
import gensim.downloader as api
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

nltk.download('stopwords')

df = pd.read_csv("spam.csv", encoding='latin-1')[['v1', 'v2']]
df.columns = ['Label', 'Message']

stop_words = set(stopwords.words("english"))
def preprocess(text):
    text = re.sub(r"[^a-z\s]", "", text.lower())
    tokens = text.split()
    return [word for word in tokens if word not in stop_words]

print("Loading Word2Vec...")
w2v_model = api.load("glove-wiki-gigaword-50")

def message_to_vec(tokens, model):
    vectors = [model[word] for word in tokens if word in model]
    if vectors:
        return np.mean(vectors, axis=0)
    return np.zeros(model.vector_size)

X = np.array([message_to_vec(preprocess(msg), w2v_model) for msg in df['Message']])
y = df['Label'].map({'ham': 0, 'spam': 1}).values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

preds = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, preds))

def predict_message_class(model, w2v_model, message):
    tokens = preprocess(message)
    vector = message_to_vec(tokens, w2v_model).reshape(1, -1)
    prediction = model.predict(vector)[0]
    return "spam" if prediction == 1 else "ham"

print(predict_message_class(model, w2v_model, "Congratulations! You've won a prize."))
